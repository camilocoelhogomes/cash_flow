/* eslint-disable node/no-unpublished-import */
import 'reflect-metadata';
import {app, BrowserWindow} from 'electron';
import {DataSource} from 'typeorm';
import {Analisys} from './Model/Entitys/Analisys';
import {CashFlow} from './Model/Entitys/CashFlow';
import {CashMovement} from './Model/Entitys/CashMovement';
import {Scenario} from './Model/Entitys/Scenario';
import path from 'path';
import {existsSync} from 'fs';
import {initDb} from './utils/initDb';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = async (): Promise<void> => {
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', async () => {
  const dbPath = path.join(__dirname, 'db.db');

  const dbExists = existsSync(dbPath);
  const dataSource = new DataSource({
    type: 'sqlite',
    database: path.join(__dirname, 'db.db'),
    entities: [Analisys, CashFlow, CashMovement, Scenario],
  });

  await dataSource.initialize();
  if (!dbExists) {
    await initDb(dataSource);
  }
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
